
---
format:
  html: {toc: true, toc-depth: 4, theme: spacelab}
highlight-style: solarized
code-block-background: true
embed-resources: false
execute: {freeze: true}

---
<style>
table {
  border-style: thin;
}
th, td {
  padding: 6px;
}
td {
  text-align: left;
}
th {
  text-align: center;
  background-color: #ddd;
}
tr:nth-child(even) {
  background-color: #f6f6f6;
}
</style><style>
.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<div class="originalCode">
```clojure
(ns chapter-2-input-output.2-3-exporting-data
  {:nextjournal.clerk/toc true}
  (:require
   [clojure.data.csv :as csv]
   [clojure.edn :as edn]
   [clojure.java.io :as io]
   [nextjournal.clerk :as clerk]
   [tablecloth.api :as tc]
   [scicloj.kind-clerk.api :as kind-clerk]))
```
</div>



<div class="originalCode">
```clojure
(kind-clerk/setup!)
```
</div>



<div class="printedClojure">
```clojure
:ok

```
</div>


# How to get data out of a notebook

<div class="originalCode">
```clojure
(def consistent-data
  (map-indexed (fn [index _coll] (str "cell-" index))
               (range 10)))
```
</div>



<div class="originalCode">
```clojure
(def data (take 20 (repeat (zipmap (range 10) consistent-data))))
```
</div>



## Writing to a CSV file
depends what the data looks like
for a seq of maps:
headers are not necessarily sorted, put them in whatever order you want here
Clojure maps make no guarantees about key order, make sure to order values,
i.e. use the same header row to get the values from each map

<div class="originalCode">
```clojure
(let [headers (-> data first keys sort)
      rows (->> data (map (fn [row]
                            (map (fn [header]
                                   (get row header)) headers))))]
  (with-open [writer (io/writer "data/csv-output.csv")]
    (csv/write-csv writer (cons headers rows))))
```
</div>



<div class="printedClojure">
```clojure
nil

```
</div>

Tablecloth can also export csvs (among other formats)

<div class="originalCode">
```clojure
(def tc-dataset (tc/dataset data))
```
</div>



<div class="originalCode">
```clojure
(tc/write-csv! tc-dataset "data/tc-output.csv")
```
</div>



<div class="printedClojure">
```clojure
21

```
</div>


## Writing nippy

<div class="originalCode">
```clojure
(tc/write! tc-dataset "data/tc-nippy.nippy")
```
</div>



<div class="printedClojure">
```clojure
nil

```
</div>

Read this also with tablecloth:

<div class="originalCode">
```clojure
(tc/dataset "data/tc-nippy.nippy")
```
</div>


data/tc-nippy.nippy [20 10]:

|      0 |      7 |      1 |      4 |      6 |      3 |      2 |      9 |      5 |      8 |
|--------|--------|--------|--------|--------|--------|--------|--------|--------|--------|
| cell-0 | cell-7 | cell-1 | cell-4 | cell-6 | cell-3 | cell-2 | cell-9 | cell-5 | cell-8 |
| cell-0 | cell-7 | cell-1 | cell-4 | cell-6 | cell-3 | cell-2 | cell-9 | cell-5 | cell-8 |
| cell-0 | cell-7 | cell-1 | cell-4 | cell-6 | cell-3 | cell-2 | cell-9 | cell-5 | cell-8 |
| cell-0 | cell-7 | cell-1 | cell-4 | cell-6 | cell-3 | cell-2 | cell-9 | cell-5 | cell-8 |
| cell-0 | cell-7 | cell-1 | cell-4 | cell-6 | cell-3 | cell-2 | cell-9 | cell-5 | cell-8 |
| cell-0 | cell-7 | cell-1 | cell-4 | cell-6 | cell-3 | cell-2 | cell-9 | cell-5 | cell-8 |
| cell-0 | cell-7 | cell-1 | cell-4 | cell-6 | cell-3 | cell-2 | cell-9 | cell-5 | cell-8 |
| cell-0 | cell-7 | cell-1 | cell-4 | cell-6 | cell-3 | cell-2 | cell-9 | cell-5 | cell-8 |
| cell-0 | cell-7 | cell-1 | cell-4 | cell-6 | cell-3 | cell-2 | cell-9 | cell-5 | cell-8 |
| cell-0 | cell-7 | cell-1 | cell-4 | cell-6 | cell-3 | cell-2 | cell-9 | cell-5 | cell-8 |
| cell-0 | cell-7 | cell-1 | cell-4 | cell-6 | cell-3 | cell-2 | cell-9 | cell-5 | cell-8 |
| cell-0 | cell-7 | cell-1 | cell-4 | cell-6 | cell-3 | cell-2 | cell-9 | cell-5 | cell-8 |
| cell-0 | cell-7 | cell-1 | cell-4 | cell-6 | cell-3 | cell-2 | cell-9 | cell-5 | cell-8 |
| cell-0 | cell-7 | cell-1 | cell-4 | cell-6 | cell-3 | cell-2 | cell-9 | cell-5 | cell-8 |
| cell-0 | cell-7 | cell-1 | cell-4 | cell-6 | cell-3 | cell-2 | cell-9 | cell-5 | cell-8 |
| cell-0 | cell-7 | cell-1 | cell-4 | cell-6 | cell-3 | cell-2 | cell-9 | cell-5 | cell-8 |
| cell-0 | cell-7 | cell-1 | cell-4 | cell-6 | cell-3 | cell-2 | cell-9 | cell-5 | cell-8 |
| cell-0 | cell-7 | cell-1 | cell-4 | cell-6 | cell-3 | cell-2 | cell-9 | cell-5 | cell-8 |
| cell-0 | cell-7 | cell-1 | cell-4 | cell-6 | cell-3 | cell-2 | cell-9 | cell-5 | cell-8 |
| cell-0 | cell-7 | cell-1 | cell-4 | cell-6 | cell-3 | cell-2 | cell-9 | cell-5 | cell-8 |




## Leave data in Clojure files

<div class="originalCode">
```clojure
(->> data pr-str (spit "data/clojure-output.edn"))
```
</div>



<div class="printedClojure">
```clojure
nil

```
</div>

This can be consumed later with:

<div class="originalCode">
```clojure
(with-open [reader (io/reader "data/clojure-output.edn")]
  (edn/read (java.io.PushbackReader. reader)))
```
</div>



<div class="printedClojure">
```clojure
({0 "cell-0",
  7 "cell-7",
  1 "cell-1",
  4 "cell-4",
  6 "cell-6",
  3 "cell-3",
  2 "cell-2",
  9 "cell-9",
  5 "cell-5",
  8 "cell-8"}
 {0 "cell-0",
  7 "cell-7",
  1 "cell-1",
  4 "cell-4",
  6 "cell-6",
  3 "cell-3",
  2 "cell-2",
  9 "cell-9",
  5 "cell-5",
  8 "cell-8"}
 {0 "cell-0",
  7 "cell-7",
  1 "cell-1",
  4 "cell-4",
  6 "cell-6",
  3 "cell-3",
  2 "cell-2",
  9 "cell-9",
  5 "cell-5",
  8 "cell-8"}
 {0 "cell-0",
  7 "cell-7",
  1 "cell-1",
  4 "cell-4",
  6 "cell-6",
  3 "cell-3",
  2 "cell-2",
  9 "cell-9",
  5 "cell-5",
  8 "cell-8"}
 {0 "cell-0",
  7 "cell-7",
  1 "cell-1",
  4 "cell-4",
  6 "cell-6",
  3 "cell-3",
  2 "cell-2",
  9 "cell-9",
  5 "cell-5",
  8 "cell-8"}
 {0 "cell-0",
  7 "cell-7",
  1 "cell-1",
  4 "cell-4",
  6 "cell-6",
  3 "cell-3",
  2 "cell-2",
  9 "cell-9",
  5 "cell-5",
  8 "cell-8"}
 {0 "cell-0",
  7 "cell-7",
  1 "cell-1",
  4 "cell-4",
  6 "cell-6",
  3 "cell-3",
  2 "cell-2",
  9 "cell-9",
  5 "cell-5",
  8 "cell-8"}
 {0 "cell-0",
  7 "cell-7",
  1 "cell-1",
  4 "cell-4",
  6 "cell-6",
  3 "cell-3",
  2 "cell-2",
  9 "cell-9",
  5 "cell-5",
  8 "cell-8"}
 {0 "cell-0",
  7 "cell-7",
  1 "cell-1",
  4 "cell-4",
  6 "cell-6",
  3 "cell-3",
  2 "cell-2",
  9 "cell-9",
  5 "cell-5",
  8 "cell-8"}
 {0 "cell-0",
  7 "cell-7",
  1 "cell-1",
  4 "cell-4",
  6 "cell-6",
  3 "cell-3",
  2 "cell-2",
  9 "cell-9",
  5 "cell-5",
  8 "cell-8"}
 {0 "cell-0",
  7 "cell-7",
  1 "cell-1",
  4 "cell-4",
  6 "cell-6",
  3 "cell-3",
  2 "cell-2",
  9 "cell-9",
  5 "cell-5",
  8 "cell-8"}
 {0 "cell-0",
  7 "cell-7",
  1 "cell-1",
  4 "cell-4",
  6 "cell-6",
  3 "cell-3",
  2 "cell-2",
  9 "cell-9",
  5 "cell-5",
  8 "cell-8"}
 {0 "cell-0",
  7 "cell-7",
  1 "cell-1",
  4 "cell-4",
  6 "cell-6",
  3 "cell-3",
  2 "cell-2",
  9 "cell-9",
  5 "cell-5",
  8 "cell-8"}
 {0 "cell-0",
  7 "cell-7",
  1 "cell-1",
  4 "cell-4",
  6 "cell-6",
  3 "cell-3",
  2 "cell-2",
  9 "cell-9",
  5 "cell-5",
  8 "cell-8"}
 {0 "cell-0",
  7 "cell-7",
  1 "cell-1",
  4 "cell-4",
  6 "cell-6",
  3 "cell-3",
  2 "cell-2",
  9 "cell-9",
  5 "cell-5",
  8 "cell-8"}
 {0 "cell-0",
  7 "cell-7",
  1 "cell-1",
  4 "cell-4",
  6 "cell-6",
  3 "cell-3",
  2 "cell-2",
  9 "cell-9",
  5 "cell-5",
  8 "cell-8"}
 {0 "cell-0",
  7 "cell-7",
  1 "cell-1",
  4 "cell-4",
  6 "cell-6",
  3 "cell-3",
  2 "cell-2",
  9 "cell-9",
  5 "cell-5",
  8 "cell-8"}
 {0 "cell-0",
  7 "cell-7",
  1 "cell-1",
  4 "cell-4",
  6 "cell-6",
  3 "cell-3",
  2 "cell-2",
  9 "cell-9",
  5 "cell-5",
  8 "cell-8"}
 {0 "cell-0",
  7 "cell-7",
  1 "cell-1",
  4 "cell-4",
  6 "cell-6",
  3 "cell-3",
  2 "cell-2",
  9 "cell-9",
  5 "cell-5",
  8 "cell-8"}
 {0 "cell-0",
  7 "cell-7",
  1 "cell-1",
  4 "cell-4",
  6 "cell-6",
  3 "cell-3",
  2 "cell-2",
  9 "cell-9",
  5 "cell-5",
  8 "cell-8"})

```
</div>


## Notebook artifacts
Clerk supports publishing your namespaces as HTML (like this website!)
To do that call

<div class="originalCode">
```clojure
(comment
  (clerk/build! {:paths "path/to/files..."
                 :index "book/index.clj"}))
```
</div>


More information in Clerk's docs: https://book.clerk.vision/#static-building
HTML pages
Other formats, options for exporting notebooks? PDFs?
Partial artifacts, e.g. export just a graph
Writing to a database?
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><code><small><small>source: <a href="https://github.com/scicloj/kindly-noted/blob/main/book/chapter_2_input_output/2_3_exporting_data.clj">book/chapter_2_input_output/2_3_exporting_data.clj</a></small></small></code></div>